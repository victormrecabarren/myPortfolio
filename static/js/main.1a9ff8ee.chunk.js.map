{"version":3,"sources":["components/Header.js","components/Contact.js","components/Portfolio.js","components/Console.js","components/Main.js","constants.js","components/Project.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","onClick","props","changeDisplay","style","this","mode","styles","active","marginTop","Component","backgroundColor","color","Contact","Portfolio","href","projects","filter","project","name","map","clientlink","Console","state","length","key","id","src","icon","alt","front_end_deployed","Main","baseURL","App","componentDidMount","fetch","then","res","json","setState","catch","err","console","log","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1a9ff8ee.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass Header extends Component {\n  render(){\n    return(\n      <>\n\n      <p className=\"myName\">Victor Recabarren</p>\n\n      <div className=\"buttonsContainer\">\n\n        <div\n          onClick={() => {\n            this.props.changeDisplay('portfolio')\n          }}\n          style={this.props.mode === 'portfolio' ? styles.active : null}\n          className=\"headerButton btn btn-primary\">\n          <p style={{marginTop: \"-1px\"}}>Portfolio</p>\n        </div>\n        <div\n          onClick={() => {\n            this.props.changeDisplay('contact')\n          }}\n          style={this.props.mode === 'contact' ? styles.active : null}\n          className=\"headerButton btn btn-primary\">\n          <p style={{marginTop: \"-1px\"}}>Contact Me</p>\n        </div>\n      </div>\n      </>\n    )\n  }\n}\n\nconst styles = {\n  active: {\n    backgroundColor: \"rgba(20,15,45, 1)\",\n    color: \"white\",\n  }\n}\n\nexport default Header\n","import React, { Component } from 'react'\n\nclass Contact extends Component {\n  render(){\n    return(\n      <p>contact</p>\n    )\n  }\n}\n\nexport default Contact\n","import React, { Component } from 'react'\n\nclass Portfolio extends Component {\n\n  render(){\n    return(\n        <>\n        <div className=\"mainInfo\">\n          <h3>Front-End Developer and Software Engineer</h3>\n          <h5>Creating applications and web pages with clean, intuitive UI.</h5>\n\n\n        </div>\n\n        <div className=\"displayPicsContainer\">\n\n          <div className=\"picsLeft\">\n\n            <a\n              href={this.props.projects.filter(project=> project.name===\"Festival Scheduler\").map(project=>project.clientlink)}\n              className=\"topLeft pics\">\n              <div className=\"overlay\"></div>\n            </a>\n\n            <div className=\"bottomLeft pics\">\n              <div className=\"overlayActive\">\n                <h3 className=\"overlayText\">browse below to learn more</h3>\n              </div>\n            </div>\n\n          </div>\n\n          <div className=\"picsRight\">\n\n            <a\n              href={this.props.projects.filter(project=> project.name===\"Spotify (Recreated!)\").map(project=>project.clientlink)}\n              className=\"topRight pics\">\n              <div className=\"overlay\"></div>\n            </a>\n\n            <a className=\"bottomRight pics\">\n              <div className=\"overlay\">\n              </div>\n            </a>\n\n          </div>\n        </div>\n\n      </>\n\n    )\n  }\n}\n\nexport default Portfolio\n","import React, { Component } from 'react'\n\nclass Console extends Component {\n\n  state = {\n\n  }\n\n  render() {\n    return(\n      <>\n        {\n          this.props.projects.length\n          ?\n          this.props.projects.map(project=>(\n\n            <div\n              className=\"projectCard\"\n              key={project.id}>\n\n              <div className={project.name}>\n                <img\n                  src={`/images/${project.icon}`}\n                  alt={project.name}\n                  className=\"cardIcon\"\n                 />\n              </div>\n\n\n              <h2 className=\"cardTitle\">{project.name}</h2>\n              <p className=\"cardText\">Hosted on: {project.front_end_deployed}</p>\n            </div>\n\n          ))\n          :\n          null\n\n        }\n      </>\n    )\n  }\n}\n\nexport default Console\n","import React, { Component } from 'react'\n\nimport Contact from './Contact'\nimport Portfolio from './Portfolio'\nimport Console from './Console'\n\n\nclass Main extends Component {\n  render() {\n    return(\n      <>\n\n      {\n        this.props.mode === 'contact'\n        ?\n        <div className=\"contactComponent\">\n        <Contact />\n        </div>\n        :\n        <>\n          <div className=\"portfolioComponent\">\n            <Portfolio\n              projects={this.props.projects}\n             />\n          </div>\n\n          <div className=\"console\">\n            <Console\n              projects={this.props.projects}\n             />\n          </div>\n        </>\n      }\n      </>\n    )\n  }\n}\n\n\nexport default Main\n","let baseURL = 'https://recabarrenportfolio.herokuapp.com'\n\n// let baseURL = 'http://localhost:3000'\n\nexport default baseURL\n","import React, { Component } from 'react'\n\nclass Project extends Component {\n  render() {\n    return(\n      <>\n      <h1>project here</h1>\n      </>\n    )\n  }\n}\n\nexport default Project\n","import React, { Component } from 'react'\nimport './App.css'\n\nimport Header from './components/Header'\nimport Main from './components/Main'\nimport Project from './components/Project'\n\nimport baseURL from './constants.js'\n\nclass App extends Component {\n  state = {\n    projects: [],\n    mode: 'portfolio',\n  }\n\n  componentDidMount = () => {\n    fetch(baseURL + '/projects')\n    .then(res=>res.json())\n    .then(projects=>this.setState({\n      projects: projects\n    }))\n    .catch(err=>console.log(err))\n    //\n    // fetch(`https://react-rails-spotify.herokuapp.com/playlists`, {mode:'no-cors'})\n    // .then(res=>console.log('woke up spotify'))\n    //\n    // fetch(`https://mycupcakesapi.herokuapp.com/cart_items`, {mode:'no-cors'})\n    // .then(res=>console.log('woke up cupcakes'))\n    //\n    // fetch(`https://festivalscheduler.herokuapp.com/CampFlogGnaw/Saturday/Lineup`, {mode:'no-cors'})\n    // .then(res=>console.log('woke up scheduler'))\n\n  }\n\n  changeDisplay = (mode) => {\n    this.setState({\n      mode: mode\n    })\n  }\n\n  render() {\n    return (\n      <>\n\n      <header className=\"headerComponent\">\n        <Header\n          changeDisplay={this.changeDisplay}\n          mode={this.state.mode}\n         />\n      </header>\n\n      <div\n        className=\"mainComponent\">\n        <Main\n          mode={this.state.mode}\n          projects={this.state.projects}\n         />\n      </div>\n\n      </>\n    )\n  }\n}\n\n\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}